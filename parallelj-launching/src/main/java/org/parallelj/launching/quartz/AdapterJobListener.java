/*
 *     ParallelJ, framework for parallel computing
 *
 *     Copyright (C) 2010, 2011, 2012 Atos Worldline or third-party contributors as
 *     indicated by the @author tags or express copyright attribution
 *     statements applied by the authors.
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
package org.parallelj.launching.quartz;

import java.util.concurrent.CountDownLatch;

import org.parallelj.launching.LaunchingMessageKind;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.JobListener;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerListener;
import org.quartz.Trigger;
import org.quartz.TriggerKey;

/**
 * Quartz Job listener for Program Launching.
 */
public class AdapterJobListener implements JobListener, SchedulerListener {

	/**
	 * The ParalleljScheduler used to launch Programs.
	 */
	private Scheduler scheduler;

	/**
	 * A Synchronization aid that will be used to wait until a program is
	 * terminated when launched synchronously.
	 */
	private CountDownLatch latcher = null;

	/**
	 * The result of a Program launching.
	 */
	private JobDataMap result = null;

	/**
	 * The Adapter Program class.
	 */
	private String jobClass;
	
	private Job adapter;

	/**
	 * The JobId generated by quartz. This is the JobId used for restarting an
	 * already launched Program.
	 */
	private String jobId = "unknown";

	/**
	 * Default Constructor.
	 * 
	 * @param jobClass
	 *            The Program Adpater class
	 * @param scheduler
	 *            The scheduler used to launch Programs.
	 */
	public AdapterJobListener(final String jobClass, final Scheduler scheduler) {
		this.jobClass = jobClass;
		this.scheduler = scheduler;
	}

	/**
	 * Get the JobId generated by Quartz.
	 * 
	 * @return jobId
	 */
	public final String getJobId() {
		return this.jobId;
	}

	/**
	 * Set a CountDownLatch to this listener.
	 * 
	 * @param latcher
	 */
	public void setLatcher(final CountDownLatch latcher) {
		this.latcher = latcher;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.JobListener#getName()
	 */
	@Override
	public final String getName() {
		return this.toString();
	}

	/**
	 * Get the result of the launched.
	 * 
	 * @return
	 */
	public JobDataMap getResult() {
		return this.result;
	}
	
	/**
	 * @return
	 */
	public Job getAdapter() {
		return this.adapter;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.quartz.JobListener#jobWasExecuted(org.quartz.JobExecutionContext,
	 * org.quartz.JobExecutionException)
	 */
	@Override
	public final void jobWasExecuted(final JobExecutionContext context,
			final JobExecutionException jobException) {
		if (context.getFireInstanceId() != null) {
			this.jobId = context.getFireInstanceId();
		}
		this.result = (JobDataMap) context.getResult();
		if (this.result != null) {
		LaunchingMessageKind.IQUARTZ0003.format(this.jobClass, this.jobId,
				String.valueOf(this.result.get(QuartzUtils.RETURN_CODE)),
				String.valueOf(this.result.get(QuartzUtils.USER_RETURN_CODE)));
		}
		try {
			this.scheduler.getListenerManager().removeJobListener(
					this.getName());
		} catch (SchedulerException e) {
			LaunchingMessageKind.EQUARTZ0005.format(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.quartz.JobListener#jobToBeExecuted(org.quartz.JobExecutionContext)
	 */
	@Override
	public void jobToBeExecuted(final JobExecutionContext context) {
		if (context.getFireInstanceId() != null) {
			this.jobId = context.getFireInstanceId();
			this.adapter = context.getJobInstance();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.quartz.JobListener#jobExecutionVetoed(org.quartz.JobExecutionContext)
	 */
	@Override
	public void jobExecutionVetoed(final JobExecutionContext context) {
		if (context.getFireInstanceId() != null) {
			this.jobId = context.getFireInstanceId();
		}
		this.result = (JobDataMap) context.getResult();
		if (this.latcher != null) {
			this.latcher.countDown();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobDeleted(org.quartz.JobKey)
	 */
	@Override
	public void jobDeleted(final JobKey jobKey) {
		if (this.latcher != null) {
			this.latcher.countDown();
		}
		try {
			this.scheduler.getListenerManager().removeJobListener(
					this.getName());
		} catch (SchedulerException e) {
			LaunchingMessageKind.EQUARTZ0004.format(this.jobClass, e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggerFinalized(org.quartz.Trigger)
	 */
	@Override
	public void triggerFinalized(final Trigger trigger) {
		if (this.latcher != null) {
			this.latcher.countDown();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobScheduled(org.quartz.Trigger)
	 */
	@Override
	public void jobScheduled(final Trigger trigger) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobUnscheduled(org.quartz.TriggerKey)
	 */
	@Override
	public void jobUnscheduled(final TriggerKey triggerKey) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggerPaused(org.quartz.TriggerKey)
	 */
	@Override
	public void triggerPaused(final TriggerKey triggerKey) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggersPaused(java.lang.String)
	 */
	@Override
	public void triggersPaused(final String triggerGroup) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggerResumed(org.quartz.TriggerKey)
	 */
	@Override
	public void triggerResumed(final TriggerKey triggerKey) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggersResumed(java.lang.String)
	 */
	@Override
	public void triggersResumed(final String triggerGroup) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobAdded(org.quartz.JobDetail)
	 */
	@Override
	public void jobAdded(final JobDetail jobDetail) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobPaused(org.quartz.JobKey)
	 */
	@Override
	public void jobPaused(final JobKey jobKey) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobsPaused(java.lang.String)
	 */
	@Override
	public void jobsPaused(final String jobGroup) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobResumed(org.quartz.JobKey)
	 */
	@Override
	public void jobResumed(final JobKey jobKey) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobsResumed(java.lang.String)
	 */
	@Override
	public void jobsResumed(final String jobGroup) {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerError(java.lang.String,
	 * org.quartz.SchedulerException)
	 */
	@Override
	public void schedulerError(final String msg, final SchedulerException cause) {
		LaunchingMessageKind.EQUARTZ0005.format(cause);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerInStandbyMode()
	 */
	@Override
	public void schedulerInStandbyMode() {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerStarted()
	 */
	@Override
	public void schedulerStarted() {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerShutdown()
	 */
	@Override
	public void schedulerShutdown() {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerShuttingdown()
	 */
	@Override
	public void schedulerShuttingdown() {
		// Do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulingDataCleared()
	 */
	@Override
	public void schedulingDataCleared() {
		// Do nothing
	}
}
